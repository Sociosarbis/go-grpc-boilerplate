// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/cmd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdServiceClient is the client API for CmdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdServiceClient interface {
	CmdCall(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (CmdService_CmdCallClient, error)
}

type cmdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdServiceClient(cc grpc.ClientConnInterface) CmdServiceClient {
	return &cmdServiceClient{cc}
}

func (c *cmdServiceClient) CmdCall(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (CmdService_CmdCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmdService_ServiceDesc.Streams[0], "/proto.CmdService/CmdCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmdServiceCmdCallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CmdService_CmdCallClient interface {
	Recv() (*CmdCallRes, error)
	grpc.ClientStream
}

type cmdServiceCmdCallClient struct {
	grpc.ClientStream
}

func (x *cmdServiceCmdCallClient) Recv() (*CmdCallRes, error) {
	m := new(CmdCallRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CmdServiceServer is the server API for CmdService service.
// All implementations must embed UnimplementedCmdServiceServer
// for forward compatibility
type CmdServiceServer interface {
	CmdCall(*Cmd, CmdService_CmdCallServer) error
	mustEmbedUnimplementedCmdServiceServer()
}

// UnimplementedCmdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCmdServiceServer struct {
}

func (UnimplementedCmdServiceServer) CmdCall(*Cmd, CmdService_CmdCallServer) error {
	return status.Errorf(codes.Unimplemented, "method CmdCall not implemented")
}
func (UnimplementedCmdServiceServer) mustEmbedUnimplementedCmdServiceServer() {}

// UnsafeCmdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdServiceServer will
// result in compilation errors.
type UnsafeCmdServiceServer interface {
	mustEmbedUnimplementedCmdServiceServer()
}

func RegisterCmdServiceServer(s grpc.ServiceRegistrar, srv CmdServiceServer) {
	s.RegisterService(&CmdService_ServiceDesc, srv)
}

func _CmdService_CmdCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cmd)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmdServiceServer).CmdCall(m, &cmdServiceCmdCallServer{stream})
}

type CmdService_CmdCallServer interface {
	Send(*CmdCallRes) error
	grpc.ServerStream
}

type cmdServiceCmdCallServer struct {
	grpc.ServerStream
}

func (x *cmdServiceCmdCallServer) Send(m *CmdCallRes) error {
	return x.ServerStream.SendMsg(m)
}

// CmdService_ServiceDesc is the grpc.ServiceDesc for CmdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CmdService",
	HandlerType: (*CmdServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CmdCall",
			Handler:       _CmdService_CmdCall_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cmd.proto",
}
